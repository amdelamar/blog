<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on Austin Delamar</title>
    <link>https://amdelamar.com/blog/category/code/</link>
    <description>Recent content in code on Austin Delamar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Nov 2021 19:20:46 -0800</lastBuildDate>
    
	<atom:link href="https://amdelamar.com/blog/category/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Distributed Cron as a Service with Akka and Quartz</title>
      <link>https://amdelamar.com/blog/distributed-cron-as-a-service-with-akka-and-quartz/</link>
      <pubDate>Mon, 22 Nov 2021 19:20:46 -0800</pubDate>
      
      <guid>https://amdelamar.com/blog/distributed-cron-as-a-service-with-akka-and-quartz/</guid>
      <description>At work my team runs a large continuous integration system.
It supports running tests on pull requests, but it also allows scheduling times to run tests against a certain branches as often as users like. A form of regression testing.</description>
    </item>
    
    <item>
      <title>Fixing Akka Http &#34;Substream Source cannot be materialized more than once&#34; error</title>
      <link>https://amdelamar.com/blog/fixing-akka-http-substream-source-cannot-be-materialized-more-than-once-error/</link>
      <pubDate>Sun, 10 May 2020 13:49:53 -0700</pubDate>
      
      <guid>https://amdelamar.com/blog/fixing-akka-http-substream-source-cannot-be-materialized-more-than-once-error/</guid>
      <description>Last week I was mostly heads-down trying to patch a distributed service we use at work that was having problems.
Its a Scala app that uses Akka Streams to transfer large, multi-GB, files from one service to another via download and upload requests.</description>
    </item>
    
    <item>
      <title>Scala CI-CD with Github Actions and Heroku</title>
      <link>https://amdelamar.com/blog/scala-ci-cd-with-github-actions-and-heroku/</link>
      <pubDate>Tue, 19 Nov 2019 20:49:35 -0800</pubDate>
      
      <guid>https://amdelamar.com/blog/scala-ci-cd-with-github-actions-and-heroku/</guid>
      <description>We&amp;rsquo;ll here&amp;rsquo;s a quick guide on how to continuously run sbt test on every pull request, and after merging deploy it to Heroku. And we&amp;rsquo; do this all within the comfort of GitHub, using their automation tool called GitHub Actions.</description>
    </item>
    
    <item>
      <title>Unit Testing Akka Http Client</title>
      <link>https://amdelamar.com/blog/unit-testing-akka-http-client/</link>
      <pubDate>Tue, 20 Aug 2019 12:33:55 -0700</pubDate>
      
      <guid>https://amdelamar.com/blog/unit-testing-akka-http-client/</guid>
      <description>Recently, I&amp;rsquo;ve had the pleasure of building a RESTful API using Akka Http.
It was relatively easy to write unit tests and integration tests to ensure the specification of my REST API was working. And for good reason. There are plenty of examples online of how to achieve this, using Akka Testkit.</description>
    </item>
    
    <item>
      <title>Websockets With Akka Http</title>
      <link>https://amdelamar.com/blog/websockets-with-akka-http/</link>
      <pubDate>Wed, 17 Jul 2019 20:24:18 -0700</pubDate>
      
      <guid>https://amdelamar.com/blog/websockets-with-akka-http/</guid>
      <description>This past weekend I wanted to play around with WebSockets and learn how to setup a server and client using them. Then I though, why not try writing a server in Akka Http? Its a great opportunity for me to learn more about Akka streams, as well as a common protocol for push/pull applications on the web, like a chatroom.</description>
    </item>
    
    <item>
      <title>Java Web Frameworks 2017</title>
      <link>https://amdelamar.com/blog/java-web-frameworks-2017/</link>
      <pubDate>Tue, 05 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://amdelamar.com/blog/java-web-frameworks-2017/</guid>
      <description>I&amp;rsquo;ve been researching Java frameworks lately, trying to find one that&amp;rsquo;s easy to extend and lightweight enough for RESTful APIs.
In my search I&amp;rsquo;ve seen all kinds of names thrown around in recent forums and old StackOverflow answers. So I thought I&amp;rsquo;d compile my findings in one big list.</description>
    </item>
    
    <item>
      <title>Some Advice on Docker as a Beginner</title>
      <link>https://amdelamar.com/blog/some-advice-on-docker-as-a-beginner/</link>
      <pubDate>Fri, 22 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://amdelamar.com/blog/some-advice-on-docker-as-a-beginner/</guid>
      <description>Docker and containers in general are great. Containers are like mini virtual machines that run only the bare essentials of an operating system. And it accomplishes this at a fraction of the resources required than a regular virutal machine. This makes Docker containers ideal for many uses, such as web servers, microservices, and more.</description>
    </item>
    
    <item>
      <title>Shortest FizzBuzz Solution in Java?</title>
      <link>https://amdelamar.com/blog/shortest-fizzbuzz-solution-in-java/</link>
      <pubDate>Fri, 03 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://amdelamar.com/blog/shortest-fizzbuzz-solution-in-java/</guid>
      <description>Count from 1 to 100, and follow these rules:
- Print &amp;ldquo;Fizz&amp;rdquo; if the number is divisible by 3
- Print &amp;ldquo;Buzz&amp;rdquo; if the number is divisible by 5
- Print &amp;ldquo;FizzBuzz&amp;rdquo; if the number is divisible by 3 and 5</description>
    </item>
    
    <item>
      <title>Java Frameworks and the Effort they might save or create</title>
      <link>https://amdelamar.com/blog/java-frameworks-and-the-effort-they-might-save-or-create/</link>
      <pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://amdelamar.com/blog/java-frameworks-and-the-effort-they-might-save-or-create/</guid>
      <description>Java is a nice programming language. But Java/J2EE websites can grow to be very complex in a short amount of time. One of the biggest areas of discussion about J2EE development today is about the many kinds of frameworks that can be implemented with your project, and what valuable features they provide, or amount of work they chop down.</description>
    </item>
    
  </channel>
</rss>