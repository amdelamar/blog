<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scala on Austin Delamar</title>
    <link>https://amdelamar.com/blog/tags/scala/</link>
    <description>Recent content in scala on Austin Delamar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 May 2020 13:49:53 -0700</lastBuildDate>
    
	<atom:link href="https://amdelamar.com/blog/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fixing Akka Http &#34;Substream Source cannot be materialized more than once&#34; error</title>
      <link>https://amdelamar.com/blog/fixing-akka-http-substream-source-cannot-be-materialized-more-than-once-error/</link>
      <pubDate>Sun, 10 May 2020 13:49:53 -0700</pubDate>
      
      <guid>https://amdelamar.com/blog/fixing-akka-http-substream-source-cannot-be-materialized-more-than-once-error/</guid>
      <description>So last week I was mostly heads-down trying to patch a distributed service we use at work that was having problems. Its a Scala app that uses Akka Streams to transfer large, multi-GB, files from one service to another via download URL and upload URL requests.</description>
    </item>
    
    <item>
      <title>Scala CI-CD with Github Actions and Heroku</title>
      <link>https://amdelamar.com/blog/scala-ci-cd-with-github-actions-and-heroku/</link>
      <pubDate>Tue, 19 Nov 2019 20:49:35 -0800</pubDate>
      
      <guid>https://amdelamar.com/blog/scala-ci-cd-with-github-actions-and-heroku/</guid>
      <description>We&amp;rsquo;ll here&amp;rsquo;s a quick guide on how to continuously run sbt test on every pull request, and after merging deploy it to Heroku. And we&amp;rsquo; do this all within the comfort of GitHub, using their automation tool called GitHub Actions.</description>
    </item>
    
    <item>
      <title>Unit Testing Akka Http Client</title>
      <link>https://amdelamar.com/blog/unit-testing-akka-http-client/</link>
      <pubDate>Tue, 20 Aug 2019 12:33:55 -0700</pubDate>
      
      <guid>https://amdelamar.com/blog/unit-testing-akka-http-client/</guid>
      <description>Recently, I&amp;rsquo;ve had the pleasure of building a RESTful API using Akka Http.
It was relatively easy to write unit tests and integration tests to ensure the specification of my REST API was working. And for good reason. There are plenty of examples online of how to achieve this, using Akka Testkit.</description>
    </item>
    
    <item>
      <title>Websockets With Akka Http</title>
      <link>https://amdelamar.com/blog/websockets-with-akka-http/</link>
      <pubDate>Wed, 17 Jul 2019 20:24:18 -0700</pubDate>
      
      <guid>https://amdelamar.com/blog/websockets-with-akka-http/</guid>
      <description>This past weekend I wanted to play around with WebSockets and learn how to setup a server and client using them. Then I though, why not try writing a server in Akka Http? Its a great opportunity for me to learn more about Akka streams, as well as a common protocol for push/pull applications on the web, like a chatroom.</description>
    </item>
    
  </channel>
</rss>